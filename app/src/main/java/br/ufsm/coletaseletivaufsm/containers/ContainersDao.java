package br.ufsm.coletaseletivaufsm.containers;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import br.ufsm.coletaseletivaufsm.containers.Containers;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTAINERS".
*/
public class ContainersDao extends AbstractDao<Containers, Long> {

    public static final String TABLENAME = "CONTAINERS";

    /**
     * Properties of entity Containers.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nome = new Property(1, String.class, "nome", false, "NOME");
        public final static Property Latitude = new Property(2, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Descricao = new Property(4, String.class, "descricao", false, "DESCRICAO");
        public final static Property Segunda = new Property(5, Boolean.class, "segunda", false, "SEGUNDA");
        public final static Property Terca = new Property(6, Boolean.class, "terca", false, "TERCA");
        public final static Property Quarta = new Property(7, Boolean.class, "quarta", false, "QUARTA");
        public final static Property Quinta = new Property(8, Boolean.class, "quinta", false, "QUINTA");
        public final static Property Sexta = new Property(9, Boolean.class, "sexta", false, "SEXTA");
        public final static Property Linkfoto = new Property(10, String.class, "linkfoto", false, "LINKFOTO");
    };


    public ContainersDao(DaoConfig config) {
        super(config);
    }
    
    public ContainersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTAINERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOME\" TEXT," + // 1: nome
                "\"LATITUDE\" REAL," + // 2: latitude
                "\"LONGITUDE\" REAL," + // 3: longitude
                "\"DESCRICAO\" TEXT," + // 4: descricao
                "\"SEGUNDA\" INTEGER," + // 5: segunda
                "\"TERCA\" INTEGER," + // 6: terca
                "\"QUARTA\" INTEGER," + // 7: quarta
                "\"QUINTA\" INTEGER," + // 8: quinta
                "\"SEXTA\" INTEGER," + // 9: sexta
                "\"LINKFOTO\" TEXT);"); // 10: linkfoto
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTAINERS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Containers entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(2, nome);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(3, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(4, longitude);
        }
 
        String descricao = entity.getDescricao();
        if (descricao != null) {
            stmt.bindString(5, descricao);
        }
 
        Boolean segunda = entity.getSegunda();
        if (segunda != null) {
            stmt.bindLong(6, segunda ? 1L: 0L);
        }
 
        Boolean terca = entity.getTerca();
        if (terca != null) {
            stmt.bindLong(7, terca ? 1L: 0L);
        }
 
        Boolean quarta = entity.getQuarta();
        if (quarta != null) {
            stmt.bindLong(8, quarta ? 1L: 0L);
        }
 
        Boolean quinta = entity.getQuinta();
        if (quinta != null) {
            stmt.bindLong(9, quinta ? 1L: 0L);
        }
 
        Boolean sexta = entity.getSexta();
        if (sexta != null) {
            stmt.bindLong(10, sexta ? 1L: 0L);
        }
 
        String linkfoto = entity.getLinkfoto();
        if (linkfoto != null) {
            stmt.bindString(11, linkfoto);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Containers readEntity(Cursor cursor, int offset) {
        Containers entity = new Containers( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nome
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // latitude
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // longitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // descricao
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // segunda
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // terca
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // quarta
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // quinta
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // sexta
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // linkfoto
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Containers entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNome(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setDescricao(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSegunda(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setTerca(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setQuarta(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setQuinta(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setSexta(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setLinkfoto(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Containers entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Containers entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    public List<Containers> getContainersSegunda(){
        return queryBuilder().where(Properties.Segunda.eq(true)).list();
    }


    public List<Containers> getContainersQuarta(){
        return queryBuilder().where(Properties.Quarta.eq(true)).list();
    }

    public Containers getContainerByName(String nome){
        return queryBuilder().where(Properties.Nome.eq(nome)).unique();
    }
}
